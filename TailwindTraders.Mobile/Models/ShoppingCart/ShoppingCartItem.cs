// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TailwindTraders.Mobile;
//
//    var shoppingCartItem = ShoppingCartItem.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace TailwindTraders.Mobile
{


    public partial class ShoppingCartItem
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("productId")]
        //[JsonConverter(typeof(ParseStringConverter))]
        public string ProductId { get; set; }

        [JsonProperty("sku")]
        public string Sku { get; set; }

        [JsonProperty("userId")]
        public string UserId { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("dateModified")]
        public DateTimeOffset DateModified { get; set; }
    }

    //public partial class ShoppingCartItem
    //{
    //    public static ShoppingCartItem FromJson(string json) => JsonConvert.DeserializeObject<ShoppingCartItem>(json, TailwindTraders.Mobile.ShoppingCartItemConverter.Settings);
    //}

    //public static class Serialize
    //{
    //    public static string ToJson(this ShoppingCartItem self) => JsonConvert.SerializeObject(self, TailwindTraders.Mobile.ShoppingCartItemConverter.Settings);
    //}


    //public static class ShoppingCartItemConverter
    //{
    //    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    //    {
    //        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
    //        DateParseHandling = DateParseHandling.None,
    //        Converters =
    //        {
    //            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
    //        },
    //    };
    //}

    //internal class ParseStringConverter : JsonConverter
    //{
    //    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    //    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    //    {
    //        if (reader.TokenType == JsonToken.Null) return null;
    //        var value = serializer.Deserialize<string>(reader);
    //        long l;
    //        if (Int64.TryParse(value, out l))
    //        {
    //            return l;
    //        }
    //        throw new Exception("Cannot unmarshal type long");
    //    }

    //    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    //    {
    //        if (untypedValue == null)
    //        {
    //            serializer.Serialize(writer, null);
    //            return;
    //        }
    //        var value = (long)untypedValue;
    //        serializer.Serialize(writer, value.ToString());
    //        return;
    //    }

    //    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    //}
}


